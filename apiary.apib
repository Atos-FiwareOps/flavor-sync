FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Fiware ops flavor synchronizer

There are different roles involved in flavor synchronizer.
* Basic users: They have a [FIWARE Lab account](https://account.lab.fiware.org/) with specific authorizations
* Infrastructure Manager: They have a FIWARE Lab account and they have authorization to manage common functionalities (role: InfrastructureManager) such as the management of the promoted flavors.
* Infrastructure owners: They have a FIWARE Lab account with the role of infrastructure and they have the privileges to manage their own node through their FIWARE Lab account

These roles will be managed by different tokens, as it is detailed in the API description:
* X-Auth-Token: this token is generated by the FIWARE Lab IdM (KeyStone GE) and it manages all the users and communities of the ecosystem.
* X-Auth-Token-KeyStone: This token is generated by the centralized KeyStone of the Fiware Lab ecosystem. Hence, based on the IdM token, the Keystone will generate the appropriate token to access to the OpenStack node with its privileges.

This API should implement the functionalities to cover the following requirements:

* Manage promoted flavors (stable)

1. Actors lists all the promoted flavors.
2. Actors gets the details of the promoted flavors.
2. The infrastructure manager creates a new promoted flavor.
3. The infrastructure manager deletes a promoted flavor.

* Manage private flavors by regions (stable).
1. The infrastructure owner gets a list of private flavors for his/her region.
2. The infrastructure owner gets the details of the private flavor for his/her region.
3. The infrastructure owner creates a private flavor for his/her region.
4. The infrastructure owner updates a private flavor for his/her region.
5. The infrastructure owner deletes a private flavor for his/her region.

* Manage the flavor lifecycle of the federated environment. With these functionalities, the ecosystem could manage the whole lifecycle of the flavors for the different regions (pending to have an agreement for the lifecycle).

1. An infrastructure operator registers his infrastructure in the flavor
sync tool (implemented by
[Register a new infrastucture](#post-%2Fv1%2Finfrastructures)).
2. An infrastructure operator lists all the available flavors in his
infrastructures (implemented by [List all flavors](#get-%2Fv1%2Fflavors{%3Fpromoted}{%3Fpublic})).
3. An infrastructure operator gets the details of one of the flavors in his
infrastructure  (implemented by [Get flavor info](#get-%2Fv1%2Fflavors%2F{id})).
4. An infrastructure operator creates a new flavor in his infrastructure
 (implemented by [Create a new flavor](#post-%2Fv1%2Fflavors{%3Fpromoted}{%3Fpublic})).
5. An infrastructure operator updates a new flavor in his infrastructure
 (implemented by [Modify an existing flavor](#put-%2Fv1%2Fflavors%2F{id})).
6. An infrastructure operator deletes a new flavor in his infrastructure
 (implemented by [Delete flavor](#delete-%2Fv1%2Fflavors%2F{id})).
7. An infrastructure operator gets a list of the “promoted” flavors
 (implemented by [List all flavors](#get-%2Fv1%2Fflavors{%3Fpromoted}{%3Fpublic})).
8. An infrastructure operator gets a list of the public flavors
 (implemented by [List all flavors](#get-%2Fv1%2Fflavors{%3Fpromoted}{%3Fpublic})).
9. An infrastructure operator “installs” one of the public flavors into his
infrastructure (implemented by
[Modify an existing flavor](#put-%2Fv1%2Fflavors%2F{id})).
10. An infrastructure operator publishes one of his private flavors
 (implemented by [Modify an existing flavor](#put-%2Fv1%2Fflavors%2F{id})).
11. A Fiware operator makes promotes one of the public
 (implemented by [Modify an existing flavor](#put-%2Fv1%2Fflavors%2F{id})).


# Group Promoted flavors

It is only necessary one token (X-Auth-Token). This token identifies the user as a member of Fiware Lab ecosystem and it includes the necessary role (InfrastructureManager) for managing promoted flavors (create, modify and remove).
In this case, it is not necessary the token (X-Auth-Token-KeyStone), since the system doesn’t connect with the OpenStack node.


## Promoted Flavors Collection [/v1/promotedflavors]

### List all promoted flavors [GET]

This operations allows to get all the promoted flavors.

+ Request
    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            Accept:application/json

+ Response 200 (application/json)

    + Body
    
            {
                "flavors": [
                    {
                        "disk": 10,
                        "id": "4432332",
                        "name": "TestNano",
                        "nodes": [],
                        "promoted": true,
                        "public": true,
                        "ram": 2,
                        "swap": 0,
                        "vcpus": 1
                    },
                    {
                        "disk": 10,
                        "id": "cfff326d-aecc-4cae-bc4e-a901f9b73c69",
                        "name": "TestNano3",
                        "nodes": [],
                        "promoted": true,
                        "public": true,
                        "ram": 2,
                        "swap": 0,
                        "vcpus": 1
                    },
                    {
                        "disk": 10,
                        "id": "d75edfb2-6165-4f72-8fa9-09da5b537708",
                        "name": "TestNano2",
                        "nodes": [],
                        "promoted": true,
                        "public": true,
                        "ram": 2,
                        "swap": 0,
                        "vcpus": 1
                    }
                ]
            }
  

+ Response 401 (text/plain)
    
    UNAUTHORIZED, returned when incorrect IdM token has been provided. 

    + Body
            
            Could not verify your access level for that URL. You have to login with proper token


### Create a new promoted flavor [POST]

Allows to create a new promoted flavor. It takes an XML or JSON body the description
of the flavor characteristics:

+ name (string) - The name of the new flavor
+ vcpus (int) - The number of CPUs for the VMs based on this flavor
+ ram (int) - The amount of RAM in megabytes for the VMs based on this flavor
+ disk (int) - The amount of disk space in gigabytes for the VMs based on this flavor
+ swap (int) - The amount of swap space in megabytes for the VMs based on this flavor


+ Request (application/json)

    + headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            Accept:application/json

    + body
            
            {
                "flavor": {
                    "name":"TestNano",
                    "vcpus":1,
                    "ram":2,
                    "disk":10,
                    "swap":0
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "flavor": {
                    "disk": 10,
                    "id": "cfff326d-aecc-4cae-bc4e-a901f9b73c69",
                    "name": "TestNano",
                    "nodes": [],
                    "promoted": true,
                    "public": true,
                    "ram": 2,
                    "swap": 0,
                    "vcpus": 1
                }
            }


+ Response 400

        Returned when incorrect data has been suplied.

+ Response 409

        Returned when the name already exists in the database.
        
+ Response 401 (text/plain)
    
    UNAUTHORIZED, returned when incorrect IdM token has been provided. 

    + Body
            
            Could not verify your access level for that URL. You have to login with proper token

+ Response 405 (text/plain)
    
    Method not allowed, returned when the user doesn't have rigth access to this resources.
    
    + Body
    
            The method specified in the Request-Line is not allowed for the resource identified by the Request-URI.




## Promoted Flavor [/v1/promotedflavors/{id}]

### Get promoted flavor info [GET]

Allows to get the details of a promoted flavor.

+ Parameters

    + id (string) - Id of the promoted flavor

+ Request

    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            Accept:application/json

+ Response 200 (application/json)

    + Body

            {
                "flavor": {
                    "disk": 10,
                    "id": "cfff326d-aecc-4cae-bc4e-a901f9b73c69",
                    "name": "TestNano",
                    "nodes": [],
                    "promoted": true,
                    "public": true,
                    "ram": 2,
                    "swap": 0,
                    "vcpus": 1
                }
            }


+ Response 404

        Returned when the object is not in the database.

+ Response 404

        Returned when the flavor is not promoted.

+ Response 401 (text/plain)
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided. 


### Delete promoted flavor [DELETE]

Allows to delete a promoted flavor.


+ Parameters

    + id (string) - Id of the promoted flavor.
+ Request
    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>

+ Response 204
+ Response 404

        Returned when the given id doesn't exist in the database.

+ Response 405

        Returned when the flavor is not promoted or there are nodes associated to the flavor

+ Response 401 (text/plain)
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided. 


# Group Regions

## Regions Collections [/v1/regions]

### List all regions [GET]

This operations allows to get the list of the available regions.

It is only necessary one token. 
X-Auth-Token: This token identifies the user as a member of Fiware Lab ecosystem.
In this case, it is not necessary the token (X-Auth-Token-KeyStone), since the system doesn’t connect with the OpenStack node.

+ Request
    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            Accept:application/json

+ Response 200 (application/json)

    + Body
    
            {
                "Infrastructures": [
                    {
                        "id": "Budapest2",
                        "name": "Budapest2"
                    },
                    {
                        "id": "Crete",
                        "name": "Crete"
                    },
                    {
                        "id": "Gent",
                        "name": "Gent"
                    },
                    {
                        "id": "Karlskrona2",
                        "name": "Karlskrona2"
                    },
                    {
                        "id": "Lannion2",
                        "name": "Lannion2"
                    },
                    {
                        "id": "Mexico",
                        "name": "Mexico"
                    },
                    {
                        "id": "PiraeusN",
                        "name": "PiraeusN"
                    },
                    {
                        "id": "PiraeusU",
                        "name": "PiraeusU"
                    },
                    {
                        "id": "Poznan",
                        "name": "Poznan"
                    },
                    {
                        "id": "SaoPaulo",
                        "name": "SaoPaulo"
                    },
                    {
                        "id": "SophiaAntipolis",
                        "name": "SophiaAntipolis"
                    },
                    {
                        "id": "Spain2",
                        "name": "Spain2"
                    },
                    {
                        "id": "Trento",
                        "name": "Trento"
                    },
                    {
                        "id": "Volos",
                        "name": "Volos"
                    },
                    {
                        "id": "Waterford",
                        "name": "Waterford"
                    },
                    {
                        "id": "Zurich",
                        "name": "Zurich"
                    }
                ]
            }
            

+ Response 401 (text/plain)
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided. 


# Group Private Flavors

It is necessary both tokens. X-Auth-Token: This token identifies the user as a member of Fiware Lab ecosystem. X-Auth-Token-KeyStone: this token identifies the user as a member of the OpenStack node. Both tokens are synchronized through the KeyRock and the KeyStone IdMs

## Private Flavors Collections [/v1/regions/{id_region}/flavors]

### List all Flavors Collections [GET]

This operations allows to get the list of the private flavors for one region.

+ Parameters

    + id_region (string) - Id of the region

+ Request
    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            X-Auth-Token-KeyStone: <token provided by OpenStack KeyStone to access the nodes>
            Accept:application/json

+ Response 200 (application/json)

    + Body
    
            {
                "flavors": [
                    {
                        "disk": 1,
                        "id": "1",
                        "name": "m1.tiny",
                        "nodes": [
                            "Spain2"
                        ],
                        "promoted": false,
                        "public": false,
                        "ram": 512,
                        "swap": 0,
                        "vcpus": 1
                    },
                    {
                        "disk": 20,
                        "id": "2",
                        "name": "m1.small",
                        "nodes": [
                            "Spain2"
                        ],
                        "promoted": false,
                        "public": false,
                        "ram": 2048,
                        "swap": 0,
                        "vcpus": 1
                    },
                    {
                        "disk": 40,
                        "id": "3",
                        "name": "m1.medium",
                        "nodes": [
                            "Spain2"
                        ],
                        "promoted": false,
                        "public": false,
                        "ram": 4096,
                        "swap": 0,
                        "vcpus": 2
                    },
                    {
                        "disk": 80,
                        "id": "4",
                        "name": "m1.large",
                        "nodes": [
                            "Spain2"
                        ],
                        "promoted": false,
                        "public": false,
                        "ram": 8192,
                        "swap": 0,
                        "vcpus": 4
                    },
                    {
                        "disk": 20,
                        "id": "5",
                        "name": "m1.large.ephemeral",
                        "nodes": [
                            "Spain2"
                        ],
                        "promoted": false,
                        "public": false,
                        "ram": 8192,
                        "swap": 0,
                        "vcpus": 4
                    }
                ]
            }

+ Response 404

        Returned when the given region id doesn't exist in the ecosystem.

+ Response 401 (text/plain)
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided.

+ Response 401

        Returned when your node credentials (KeyStone token) are wrong and the request requires user authentication

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

### Create a new private flavor [POST]

Allows to create a new private flavor for one region. It takes an XML or JSON body the description
of the flavor characteristics:

+ name (string) - The name of the new flavor
+ vcpus (int) - The number of CPUs for the VMs based on this flavor
+ ram (int) - The amount of RAM in megabytes for the VMs based on this flavor
+ disk (int) - The amount of disk space in gigabytes for the VMs based on this flavor
+ swap (int) - The amount of swap space in megabytes for the VMs based on this flavor


+ Parameters

    + id_region (string) - Id of the region

+ Request (application/json)

    + headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            X-Auth-Token-KeyStone: <token provided by OpenStack KeyStone to access the nodes>
            Accept:application/json

    + body
            
            {
                "flavor": {
                    "name":"TestNano",
                    "vcpus":1,
                    "ram":2,
                    "disk":10,
                    "swap":0
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "flavor": {
                    "disk": 10,
                    "id": "cfff326d-aecc-4cae-bc4e-a901f9b73c69",
                    "name": "TestNano",
                    "nodes": [],
                    "promoted": false,
                    "public": false,
                    "ram": 2,
                    "swap": 0,
                    "vcpus": 1
                }
            }


+ Response 400

        Returned when incorrect data has been suplied.

+ Response 404

        Returned when the region doen't exist.

+ Response 409

        Returned when the name already exists in the database.
        
+ Response 401
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided.

+ Response 401

        Returned when your node credentials (KeyStone token) are wrong and the request requires user authentication

+ Response 403

        Returned when, managing flavors in one region, the credentials (KeyStone token) don't give you access to this resource.

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

## Private Flavor [/v1/region/{id_region}/flavors/{id}]

### Get promoted flavor info [GET]

Allows to get the details of a private flavor for one region.

+ Parameters

    + id_region (string) - Id of the region
    + id (string) - Id of the private flavor

+ Request

    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            X-Auth-Token-KeyStone: <TODO>
            Accept:application/json

+ Response 200 (application/json)

    + Body

            {
                "flavor": {
                    "disk": 20,
                    "id": "5",
                    "name": "m1.large.ephemeral",
                    "nodes": [
                        "Spain2"
                    ],
                    "promoted": false,
                    "public": false,
                    "ram": 8192,
                    "swap": 0,
                    "vcpus": 4
                }
            }

+ Response 401
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided.

+ Response 401

        Returned when your node credentials (KeyStone token) are wrong and the request requires user authentication

+ Response 404

        Returned when the flavor doesn't exist in the node.

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.


### Delete promoted flavor [DELETE]

Allows to delete a private flavor for one region.

+ Parameters
    
    + id_region (string) - Id of the region
    + id (string) - Id of the promoted flavor.
+ Request
    + Headers
    
            X-Auth-Token: <token provided by FIWARE IdM>
            X-Auth-Token-KeyStone: <TODO>

+ Response 204
+ Response 404

        Returned when the flavor doesn't exists in the node.

+ Response 404

        Returned when the region doesn't exist.

+ Response 401
    
        UNAUTHORIZED, returned when incorrect IdM token has been provided.

+ Response 401

        Returned when your node credentials (KeyStone token) are wrong and the request requires user authentication

+ Response 403

        Returned when, managing flavors in one region, the credentials (KeyStone token) don't give you access to this resource.

+ Response 404

        Returned when the flavor doesn't exist in the node.

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.


# Group Infrastructures

## Infrastructure Collection [/v1/infrastructures]

### Register a new infrastucture [POST]

Allows to create a new infrastructure. It takes a XML or JSON body containing
the name, endpoint url of nova.

+ name (string) - The name of the of the infrastructure
+ nova_url (string) - URL where the Nova API can be reached
+ keystone_url (string) - URL where the Keystone API can be reached
+ username (string) - Username for authenticating in Keystone
+ password (string) - Password for authenticating in Keystone
+ tenant (string) - Tenant name to be managed

+ Request (application/xml)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <infrastructure>
                <name>Mordor</name>
                <nova_url>http://11.22.33.44:8776/</nova_url>
                <keystone_url>http://55.66.77.88:35357/</keystone_url>
                <username>myUsername</username>
                <password>myPassword</password>
                <tenant>myTenant</tenant>
            </infrastructure>

+ Response 201 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
            <infrastructure>
                <name>Mordor</name>
            </infrastructure>

+ Request (application/json)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            {
                "infrastructure": {
                    "name": "Mordor",
                    "nova_url": "http://11.22.33.44:8776/",
                    "keystone_url": "http://55.66.77.88:35357/",
                    "username": "myUsername",
                    "password": "myPassword",
                    "tenant": "myTenant"
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "infrastructure": {
                    "name":"Mordor"
                }
            }

+ Response 400

        Returned when incorrect data has been suplied.

+ Response 409

        Returned when the uuid or name already exists in the database.

## Infrastructure [/v1/infrastructures/{id}]

### Unregister infrastructure [DELETE]

+ Parameters

    + id (string) - Id of the infrastructure

+ Request

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 204
+ Response 404

        Returned when the given uuid doesn't exist in the database.

+ Response 409

        Returned when the infrastructure is still being used.

# Group Flavors

## Flavors Collection [/v1/flavors{?promoted}{?public}]

### List all flavors [GET]

This operations allows to get all the registered flavors.


+ Parameters

    + promoted (optional, boolean) - If true retrieves only the promoted flavors.
    + public (optional, boolean) - Retrieve only the public or private flavors.

+ Request

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/xml)

    + Body
            
            <?xml version="1.0" encoding="UTF-8"?>
            <flavors>
                <flavor id="82375e8c-9b4c-4e7c-9495-c0205c8622d2">
                    <name>tiny</name>
                    <vcpus>1</vcpus>
                    <ram>512</ram>
                    <disk>1</disk>
                    <swap>0</swap>
                    <promoted>true</promoted>
                    <public>true</public>
                    <node>SaoPaulo</node>
                    <node>Karlskrona2</node>
                    <node>Lannion</node>
                    <node>SophiaAntipolis</node>
                    <node>Mexico</node>
                    <node>Waterford</node>
                    <node>Poznan</node>
                    <node>PiraeusU</node>
                    <node>Crete</node>
                    <node>PiraeusN</node>
                    <node>Stockholm2</node>
                    <node>Zurich</node>
                    <node>Budapest2</node>
                    <node>Berlin2</node>
                    <node>Prague</node>
                    <node>Volos</node>
                    <node>Gent</node>
                    <node>Trento</node>
                    <node>Spain2</node>
                </flavor>
                <flavor id="e3b0f0a4-ea03-428b-97c6-8a06fd62b014">
                    <name>medium</name>
                    <vcpus>2</vcpus>
                    <ram>1024</ram>
                    <disk>1</disk>
                    <swap>0</swap>
                    <promoted>false</promoted>
                    <public>true</public>
                    <node>Waterford</node>
                    <node>Poznan</node>
                    <node>Crete</node>
                    <node>Stockholm2</node>
                    <node>Budapest2</node>
                    <node>Berlin2</node>
                    <node>Volos</node>
                </flavor>
                <flavor id="d1fb4620-f711-4393-b9f3-f2d476464daf">
                    <name>hpc</name>
                    <vcpus>16</vcpus>
                    <ram>16384</ram>
                    <disk>100</disk>
                    <swap>0</swap>
                    <promoted>false</promoted>
                    <public>true</public>
                    <node>SaoPaulo</node>
                    <node>Spain2</node>
                </flavor>
                <flavor id="857dc211-e1f4-4cbe-b498-6847c14acb26">
                    <name>my_flavor</name>
                    <vcpus>2</vcpus>
                    <ram>512</ram>
                    <disk>3</disk>
                    <swap>0</swap>
                    <promoted>false</promoted>
                    <public>false</public>
                    <node>Mordor</node>
                </flavor>
            </flavors>
        
        
+ Response 200 (application/json)

    + Body
            
            {
                "flavors":[
                    {
                        "id":"82375e8c-9b4c-4e7c-9495-c0205c8622d2",
                        "name":"tiny",
                        "vcpus":1,
                        "ram":512,
                        "disk":1,
                        "swap":0,
                        "promoted":true,
                        "public":true,
                        "nodes":[
                            "SaoPaulo",
                            "Karlskrona2",
                            "Lannion",
                            "SophiaAntipolis",
                            "Mexico",
                            "Waterford",
                            "Poznan",
                            "PiraeusU",
                            "Crete",
                            "PiraeusN",
                            "Stockholm2",
                            "Zurich",
                            "Budapest2",
                            "Berlin2",
                            "Prague",
                            "Volos",
                            "Gent",
                            "Trento",
                            "Spain2"
                        ]
                    },
                    {
                        "id":"e3b0f0a4-ea03-428b-97c6-8a06fd62b014",
                        "name":"medium",
                        "vcpus":2,
                        "ram":1024,
                        "disk":1,
                        "swap":0,
                        "promoted":false,
                        "public":true,
                        "nodes":[
                            "Waterford",
                            "Poznan",
                            "Crete",
                            "Stockholm2",
                            "Budapest2",
                            "Berlin2",
                            "Volos"
                        ]
                    },
                    {
                        "id":"d1fb4620-f711-4393-b9f3-f2d476464daf",
                        "name":"hpc",
                        "vcpus":16,
                        "ram":16384,
                        "disk":100,
                        "swap":0,
                        "promoted":false,
                        "public":true,
                        "nodes":[
                            "SaoPaulo",
                            "Spain2"
                        ]
                    },
                    {
                        "id":"857dc211-e1f4-4cbe-b498-6847c14acb26",
                        "name":"my_flavor",
                        "vcpus":2,
                        "ram":512,
                        "disk":3,
                        "swap":0,
                        "promoted":false,
                        "public":false,
                        "nodes":[
                            "Mordor"
                        ]
                    }
                ]
            }

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

### Create a new flavor [POST]

Allows to create a new flavor. It takes an XML or JSON body the description
of the flavor characteristics:

+ name (string) - The name of the new flavor
+ vcpus (int) - The number of CPUs for the VMs based on this flavor
+ ram (int) - The amount of RAM in megabytes for the VMs based on this flavor
+ disk (int) - The amount of disk space in gigabytes for the VMs based on this flavor
+ swap (int) - The amount of swap space in megabytes for the VMs based on this flavor
+ public (boolean, optional) - Make the flavor public in the flavor sync tool.

+ Request (application/xml)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
    
            <?xml version="1.0" encoding="UTF-8"?>
            <flavor>
                <name>insane</name>
                <vcpus>640</vcpus>
                <ram>1232896</ram>
                <disk>1262485504</disk>
                <swap>0</swap>
            </flavor>


+ Response 201 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <flavor id="567b200e-0aca-49e0-8e9a-8c1f6ad3abe2">
                <name>insane</name>
                <vcpus>640</vcpus>
                <ram>1232896</ram>
                <disk>1262485504</disk>
                <swap>0</swap>
                <promoted>false</promoted>
                <public>false</public>
                <node>Mordor</node>
            </flavor>

+ Request (application/json)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            {
                "flavor": {
                    "name":"insane",
                    "vcpus":640,
                    "ram":1232896,
                    "disk":1262485504,
                    "swap":0
                }
            }

+ Response 201 (application/json)

    + Body

            {
                "flavor": {
                    "id":"567b200e-0aca-49e0-8e9a-8c1f6ad3abe2",
                    "name":"insane",
                    "vcpus":640,
                    "ram":1232896,
                    "disk":1262485504,
                    "swap":0,
                    "promoted":false,
                    "public":false,
                    "nodes":[
                        "Mordor"
                    ]
                }
            }

+ Response 400

        Returned when incorrect data has been suplied.

+ Response 409

        Returned when the name already exists in the database.
        
+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

## Flavor [/v1/flavors/{id}]

### Get flavor info [GET]

+ Parameters

    + id (string) - Id of the flavor

+ Request

    + Headers
    
            user: basic authentication user
            password: basic authentication password

+ Response 200 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <flavor id="567b200e-0aca-49e0-8e9a-8c1f6ad3abe2">
                <name>insane</name>
                <vcpus>640</vcpus>
                <ram>1232896</ram>
                <disk>1262485504</disk>
                <swap>0</swap>
                <promoted>false</promoted>
                <public>false</public>
                <node>Mordor</node>
            </flavor>

+ Response 200 (application/json)

    + Body

            {
                "flavor": {
                    "id":"567b200e-0aca-49e0-8e9a-8c1f6ad3abe2",
                    "name":"insane",
                    "vcpus":640,
                    "ram":1232896,
                    "disk":1262485504,
                    "swap":0,
                    "promoted":false,
                    "public":false,
                    "nodes":[
                        "Mordor"
                    ]
                }
            }

+ Response 404

        Returned when the object is not in the database.

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

### Modify an existing flavor [PUT]

Updates the flavor identified by the id. The allowed changes refers to its 
public and promoted parameters. Any infrastructure owner will be able to publish
his images, but superadmin privileges will be needed for promoting them. Once
the flavor has been published, it cannot be unpublished.

It also allows to install a public flavor in a new infrastructure.

+ promoted (optional boolean) - Promote the flavor in the flavor sync tool.
+ public (optional, boolean) - Make the flavor public in the flavor sync tool.
+ nodes (optional, array[string]) - Single list with the nodes to install the flavor in

+ Parameters

    + id (string) - Id of the flavor

+ Request (application/xml)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            <?xml version="1.0" encoding="UTF-8"?>
            <flavor>
                <node>Mordor</node>
            </flavor>

+ Response 200 (application/xml)

    + Body

            <?xml version="1.0" encoding="UTF-8"?>
            <flavor id="d1fb4620-f711-4393-b9f3-f2d476464daf">
                <name>hpc</name>
                <vcpus>16</vcpus>
                <ram>16384</ram>
                <disk>100</disk>
                <swap>0</swap>
                <promoted>false</promoted>
                <public>true</public>
                <node>SaoPaulo</node>
                <node>Spain2</node>
                <node>Mordor</node>
            </flavor>

+ Request (application/json)

    + headers
    
            user: basic authentication user
            password: basic authentication password

    + body
            
            {
                "flavor": {
                    "nodes":["Mordor"]
                }
            }

+ Response 200 (application/json)

    + Body

            {
                "flavor": {
                    "id":"d1fb4620-f711-4393-b9f3-f2d476464daf",
                    "name":"hpc",
                    "vcpus":16,
                    "ram":16384,
                    "disk":100,
                    "swap":0,
                    "promoted":false,
                    "public":true,
                    "nodes":[
                        "SaoPaulo",
                        "Spain2",
                        "Mordor"
                    ]
                }
            }

+ Response 400

        Returned when incorrect data has been suplied.

+ Response 401

        Returned when a user has not privileges to promote a flavor.

+ Response 404

        Returned when the object with the id is not in the database.

+ Response 409

        Returned when the node to publish on is not found in the database.
        Returned when trying to unpublish a flavor.
        
+ Response 502

        Returned when the OpenStack infrastructure is not reachable.

### Delete flavor [DELETE]

+ Parameters

    + id (string) - Id of the flavor.

+ Response 204
+ Response 404

        Returned when the given id doesn't exist in the database.

+ Response 502

        Returned when the OpenStack infrastructure is not reachable.